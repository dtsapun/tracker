<!DOCTYPE html>
<html lang="uk">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Клікер + секундомір + TOTP генератор</title>
<style>
  body {
    margin: 0; padding: 10px;
    font-family: monospace;
    user-select: none;
    background: #f7f7f7;
  }
  #container {
    border: 1px solid #aaa;
    padding: 10px;
    font-size: 14px;
    width: 155px;
    background: #fff;
    box-shadow: 0 0 5px rgba(0,0,0,0.2);
  }
  .row { display: flex; align-items: center; justify-content: space-between; margin-bottom: 6px; }
  button {
    font-size: 14px;
    padding: 8px 4px;
    cursor: pointer;
    user-select: none;
  }
  #btn1, #btn2 {
    width: 75px;
  }
  #labelPercent, #labelClicks {
    font-weight: bold;
  }
  #totalsRow {
    margin-top: 8px; display: flex; justify-content: space-between;
  }
  .inputRow {
    margin-top: 8px; display: flex; justify-content: space-between;
  }
  .inputRow label {
    flex-grow: 1; line-height: 28px;
  }
  .inputRow input {
    width: 60px;
    font-size: 14px;
    padding: 2px 4px;
  }
  #stopwatch {
    margin-top: 12px;
    font-size: 20px;
    text-align: center;
    font-weight: bold;
  }
  #pauseTotpRow {
    margin-top: 8px;
    display: flex;
    justify-content: flex-start;
    gap: 8px;
  }
  #pause {
    width: 100px;
    font-size: 14px;
    padding: 6px 4px;
    cursor: pointer;
  }
  #toggleTotp {
    width: 50px;
    font-size: 12px;
    padding: 4px 6px;
    cursor: pointer;
    background-color: #eee;
    border: 1px solid #ccc;
    border-radius: 3px;
    color: #333;
    user-select: none;
  }
  #toggleTotp:hover {
    background-color: #ddd;
  }
  /* TOTP стилі */
  #totpContainer {
    margin-top: 12px;
    border-top: 1px solid #ccc;
    padding-top: 10px;
    position: relative;
  }
  #totpContainer input {
    width: 100%;
    padding: 6px 4px;
    font-size: 14px;
    box-sizing: border-box;
    font-family: monospace;
    user-select: text;
  }
  #totpCode {
    margin: 6px 0;
    font-size: 20px;
    font-weight: bold;
    text-align: center;
    letter-spacing: 4px;
    cursor: pointer;
    user-select: all;
    position: relative;
  }
  #copyMsg {
    position: absolute;
    top: -22px;
    right: 0;
    background: #333;
    color: #fff;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 12px;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
    user-select: none;
  }
  #copyMsg.show {
    opacity: 1;
    pointer-events: auto;
  }
  #totpTimer {
    font-weight: bold;
    text-align: center;
  }
</style>
</head>
<body>
<div id="container">
  <div class="row">
    <button id="btn1">Video</button>
    <button id="btn2">Comment</button>
  </div>
  <div id="totalsRow">
    <div><span id="labelPercent">%:</span> <span id="totalPercent">0.00%</span></div>
    <div><span id="labelClicks">Σ:</span> <span id="totalClicks">0</span></div>
  </div>
  <div class="inputRow">
    <label for="click1">Video:</label>
    <input id="click1" type="number" min="0" step="1" value="0" />
  </div>
  <div class="inputRow">
    <label for="click2">Comment:</label>
    <input id="click2" type="number" min="0" step="1" value="0" />
  </div>
  <div id="stopwatch">00:00</div>
  
  <div id="pauseTotpRow">
    <button id="pause">Pause</button>
    <button id="toggleTotp" title="Показати/приховати TOTP генератор">TOTP</button>
  </div>

  <div id="totpContainer" style="display:none;">
    <input id="totpSecret" placeholder="Secret code" autocomplete="off" />
    <div id="totpCode" title="Клік для копіювання">
      ------<span id="copyMsg">Copied!</span>
    </div>
    <div id="totpTimer"></div>
  </div>
</div>

<script>
(function(){
  // ---- Клікер + секундомір ----
  const weight1 = 0.83;
  const weight2 = 0.2;

  const input1 = document.getElementById('click1');
  const input2 = document.getElementById('click2');
  const btn1 = document.getElementById('btn1');
  const btn2 = document.getElementById('btn2');
  const totalPercentSpan = document.getElementById('totalPercent');
  const totalClicksSpan = document.getElementById('totalClicks');
  const stopwatch = document.getElementById('stopwatch');
  const pauseBtn = document.getElementById('pause');

  let startTime = null;
  let timerInterval = null;
  let running = false;

  function formatTime(ms){
    let totalSeconds = Math.floor(ms / 1000);
    let minutes = String(Math.floor(totalSeconds / 60)).padStart(2,'0');
    let seconds = String(totalSeconds % 60).padStart(2,'0');
    return `${minutes}:${seconds}`;
  }

  function updateTimer(){
    if(running){
      let elapsed = Date.now() - startTime;
      stopwatch.textContent = formatTime(elapsed);
    }
  }

  function startStopwatch(){
    startTime = Date.now();
    running = true;
    if(timerInterval) clearInterval(timerInterval);
    timerInterval = setInterval(updateTimer, 250);
    stopwatch.textContent = '00:00';
  }

  function pauseStopwatch(){
    if(running){
      clearInterval(timerInterval);
      running = false;
    }
    stopwatch.textContent = '00:00';
    startTime = null;
  }

  function updateTotals(){
    let val1 = parseInt(input1.value) || 0;
    let val2 = parseInt(input2.value) || 0;
    let totalClicks = val1 + val2;
    let percent = val1 * weight1 + val2 * weight2;
    totalClicksSpan.textContent = totalClicks;
    totalPercentSpan.textContent = percent.toFixed(2) + '%';
  }

  btn1.onclick = () => {
    input1.value = (parseInt(input1.value) || 0) + 1;
    updateTotals();
    startStopwatch();
  };

  btn2.onclick = () => {
    input2.value = (parseInt(input2.value) || 0) + 1;
    updateTotals();
    startStopwatch();
  };

  pauseBtn.onclick = () => {
    pauseStopwatch();
  };

  input1.addEventListener('input', updateTotals);
  input2.addEventListener('input', updateTotals);

  updateTotals();
  stopwatch.textContent = '00:00';

  // ---- TOTP генератор ----
  const btnTotp = document.getElementById('toggleTotp');
  const totpContainer = document.getElementById('totpContainer');
  const secretInput = document.getElementById('totpSecret');
  const codeDisplay = document.getElementById('totpCode');
  const timerDisplay = document.getElementById('totpTimer');
  const copyMsg = document.getElementById('copyMsg');
  let totpInterval = null;

  // Base32 decode
  function base32tohex(base32) {
    const base32chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
    let bits = "";
    let hex = "";

    base32 = base32.replace(/=+$/,"").toUpperCase();

    for (let i = 0; i < base32.length; i++) {
      let val = base32chars.indexOf(base32.charAt(i));
      if (val === -1) return null;
      bits += val.toString(2).padStart(5, "0");
    }

    for (let i = 0; i+4 <= bits.length; i+=4) {
      let chunk = bits.substr(i,4);
      hex += parseInt(chunk,2).toString(16);
    }
    return hex;
  }

  // HMAC-SHA1 (via SubtleCrypto)
  async function hmacSha1(keyHex, msgHex) {
    const keyBytes = hexToBytes(keyHex);
    const msgBytes = hexToBytes(msgHex);

    const cryptoKey = await crypto.subtle.importKey(
      "raw",
      keyBytes,
      {name: "HMAC", hash: "SHA-1"},
      false,
      ["sign"]
    );

    const sig = await crypto.subtle.sign("HMAC", cryptoKey, msgBytes);
    return new Uint8Array(sig);
  }

  function hexToBytes(hex) {
    let bytes = new Uint8Array(hex.length / 2);
    for (let i=0; i<bytes.length; i++) {
      bytes[i] = parseInt(hex.substr(i*2, 2), 16);
    }
    return bytes;
  }

  async function generateTOTP(secret, timeStep=30) {
    let keyHex = base32tohex(secret);
    if (!keyHex) return null;

    let epoch = Math.floor(Date.now()/1000);
    let time = Math.floor(epoch / timeStep);
    let timeHex = time.toString(16).padStart(16, "0");

    let hmac = await hmacSha1(keyHex, timeHex);
    if (!hmac) return null;

    let offset = hmac[hmac.length - 1] & 0xf;
    let code = ((hmac[offset] & 0x7f) << 24) |
               ((hmac[offset+1] & 0xff) << 16) |
               ((hmac[offset+2] & 0xff) << 8) |
               (hmac[offset+3] & 0xff);

    let otp = (code % 1000000).toString().padStart(6, "0");
    return otp;
  }

  async function updateTotpCode() {
    const secret = secretInput.value.trim();
    if (!secret) {
      codeDisplay.textContent = "------";
      codeDisplay.appendChild(copyMsg);
      return;
    }
    try {
      const code = await generateTOTP(secret);
      if (code) {
        codeDisplay.textContent = code;
        codeDisplay.appendChild(copyMsg);
      } else {
        codeDisplay.textContent = "Error";
        codeDisplay.appendChild(copyMsg);
      }
    } catch(e) {
      codeDisplay.textContent = "Error";
      codeDisplay.appendChild(copyMsg);
    }
  }

  let lastEpochStep = null;
  function startTotp(){
    updateTotpCode();

    if(totpInterval) clearInterval(totpInterval);

    totpInterval = setInterval(() => {
      const epoch = Math.floor(Date.now()/1000);
      const step = Math.floor(epoch / 30);
      const secondsLeft = 30 - (epoch % 30);
      timerDisplay.textContent = `Update in ${secondsLeft} sec`;

      if (step !== lastEpochStep) {
        lastEpochStep = step;
        updateTotpCode();
      }
    }, 1000);
  }

  function stopTotp(){
    if(totpInterval) clearInterval(totpInterval);
    timerDisplay.textContent = "";
    codeDisplay.textContent = "------";
    codeDisplay.appendChild(copyMsg);
  }

  btnTotp.onclick = () => {
    if (totpContainer.style.display === 'none') {
      totpContainer.style.display = 'block';
      startTotp();
    } else {
      totpContainer.style.display = 'none';
      stopTotp();
    }
  };

  secretInput.addEventListener('input', () => {
    updateTotpCode();
  });

  function fallbackCopyText(text) {
    const textarea = document.createElement('textarea');
    textarea.value = text;
    textarea.style.position = 'fixed';
    textarea.style.opacity = '0';
    document.body.appendChild(textarea);
    textarea.select();
    try {
      const successful = document.execCommand('copy');
      if (successful) {
        copyMsg.classList.add('show');
        setTimeout(() => copyMsg.classList.remove('show'), 1500);
      } else {
        alert('Не вдалося скопіювати код');
      }
    } catch (err) {
      alert('Не вдалося скопіювати код');
    }
    document.body.removeChild(textarea);
  }

  codeDisplay.addEventListener('click', () => {
    const text = codeDisplay.textContent.replace('Copied!', '').trim();
    if (text && text !== '------' && text !== 'Error') {
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(text).then(() => {
          copyMsg.classList.add('show');
          setTimeout(() => copyMsg.classList.remove('show'), 1500);
        }).catch(() => {
          fallbackCopyText(text);
        });
      } else {
        fallbackCopyText(text);
      }
    }
  });

})();
</script>
</body>
</html>
